def longestCommonSubsequence(a, b):
    n = len(a)
    m = len(b)
    
    # Initialize the DP table
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    
    # Fill the DP table
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if a[i - 1] == b[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    # Reconstruct the LCS from the DP table
    lcs = []
    i, j = n, m
    while i > 0 and j > 0:
        if a[i - 1] == b[j - 1]:
            lcs.append(a[i - 1])
            i -= 1
            j -= 1
        elif dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1
    
    # The LCS is constructed backwards, so we reverse it
    lcs.reverse()
    
    return lcs

# Input reading
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

# Compute and print the LCS
lcs = longestCommonSubsequence(a, b)
print(" ".join(map(str, lcs)))
